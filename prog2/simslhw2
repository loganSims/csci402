#lang racket
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Logan Sims
;; CSCI 402
;; Summer 2015     
;; Program 2
;;
;; JHusbands
;; 
;; A riverbank is defined as a two lists 
;; for husbands and wives.
;; 
;; The list contain whole numbers. number i in the husband list is 
;; the husband of wife i in the wife list. in a riverbank the husband
;; list is the car, while the wife is the cdr.
;;
;; ex. ((1 2 3) (1 2 3)) is the inital state of riverbank 1
;; at the start of the game. 
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define open '())
(define close '())

;sets up the start state
(define setup
  (lambda (couples)
    (define rb1 (list))
    (define p (list))
    (define i 1)
    (for ((i (in-range 1 (+ couples 1))))
      (set! p (append p (list i))))
    (set! rb1 (append (list p) (list p)))
    (append rb1 '(1))))

;Checks if a riverbank or boat is valid.
(define valid?
  (lambda (state)
    (define valid #f)
    
    ;If husband/wife list is empty move is valid.
    (cond ((or (empty? (car state)) (empty? (cdr state)))
           (set! valid #t)))
    
    ;If husband list not empty make sure each wife has
    ;their husband with them.
    (cond ((not valid) 
           (set! valid #t)
           (for ((wife (list-ref state 1)))
            (cond((not (member wife (list-ref state 0)))
                  (set! valid #f))))))
    
    valid))


(define get-choices
  (lambda (rb1 rb2 boat-size)
    
    (define choices '())
    
    (define husbands '())
    (define wives '())
    
    (define boatH '())
    (define boatW '())
    
    (define in-boat 0)
   
    ;boat is at rb1, ship from rb1 -> rb2
    (cond ((= 1 (list-ref rb1 2))
           (set! husbands (list-ref rb1 0))
           (set! wives (list-ref rb1 1)))
    ;boat at rb2, ship from rb2 -> rb1
          (else
           (set! husbands (list-ref rb2 0))
           (set! wives (list-ref rb2 1))))
           
           
    (for ((husband husbands))
      ;append husbands to boat until full
      (set! in-boat (+ in-boat 1))
      (cond ((<= in-boat boat-size)   
             (set! boatH (append boatH (list husband)))
             (displayln (append (list boatH) '(())))))
             ;check if valid move
             ;if valid check if duplicated
             ;add to tree if not
               )
    
    (set! in-boat 0)
    
    (for ((wife wives))
      ;append wives to boat until full
      (set! in-boat (+ in-boat 1))
      (cond ((<= in-boat boat-size)   
             (set! boatW (append boatW (list wife)))
             (displayln (append '(()) (list boatW)))
             ))
             ;check if valid move
             ;if valid check if duplicated
             ;add to tree if not
               )
     
     (set! in-boat 0)    
     (set! boatH '())
     (set! boatW '())
     
     ; couples in boat up to boat-size
     ; (Ha Wa Hb Wb Hc etc...)
     (define h/w 0)
     (define h-index 0)
     (define w-index 0)
    
     (for ((i boat-size))
       (cond((= h/w 0) ;add husband
             (cond((< (length boatH) (length husbands))
                   (set! boatH (append boatH (list (list-ref husbands h-index))))
                   (set! h-index (+ 1 h-index))
                   (set! h/w 1))))
            (else
             (cond((< (length boatW) (length wives))
                   (set! boatW (append boatW (list (list-ref wives w-index))))
                   (set! w-index (+ 1 w-index))
                   (set! h/w 0))))
             )

       (displayln (append (list boatH) (list boatW))))
    
    
    
    
))

(define build-tree
  (lambda (rb1 rb2 boat-size)
    
    (define children '())
    
    (set! children (get-choices rb1 rb2 boat-size))))
    
    ;explore choices from those children with call to build-tree?
 
               
;Main function
(define JHusbands
  (lambda (couples boat-size)

    (define rb1 (setup couples))
    (define rb2 '(() ()))
    
    ;(displayln rb1)
    ;(displayln rb2)
    ;(displayln (valid? rb1))
    ;(displayln (valid? rb2))
    (set! rb1 '((1 2 3)(1 2)1))
    
    (build-tree rb1 rb2 boat-size)
    
    
    
    
    ))

(JHusbands 3 2)